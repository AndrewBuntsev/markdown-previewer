{"version":3,"sources":["consts/initialEditorData.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_EDITOR_DATA","style","backgroundColor","color","fontWeight","fontSize","border","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","react_default","a","createElement","id","defaultValue","objectSpread","positionStyle","rows","onChange","Component","padding","display","renderer","marked","Renderer","setOptions","breaks","Previewer","document","getElementById","innerHTML","editorData","console","log","App","e","setState","target","value","className","width","components_Editor","float","height","components_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAAaA,EAAmB,8qCCI1BC,EAAQ,CACVC,gBAAiB,UACjBC,MAAO,UACPC,WAAY,OACZC,SAAU,OACVC,OAAQ,qBAwBGC,cApBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAACC,KAAMjB,GAHNS,wEAOlB,OACES,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASC,aAAcV,KAAKI,MAAMC,KAAMhB,MAAKS,OAAAa,EAAA,EAAAb,CAAA,GAAMT,EAAUW,KAAKJ,MAAMgB,eAAgBC,KAAM,GAAIC,SAAUd,KAAKJ,MAAMkB,mBAVzHC,6BCJf1B,EAAQ,CACVC,gBAAiB,UACjBC,MAAO,UACPC,WAAY,OACZwB,QAAS,MACTvB,SAAU,OACVwB,QAAS,eACTvB,OAAQ,qBAGNwB,EAAW,IAAIC,IAAOC,SAC5BD,IAAOE,WAAW,CAAEC,QAAQ,QAsBbC,8LAjBXC,SAASC,eAAe,WAAWC,UAAYP,IAAOnB,KAAKJ,MAAM+B,WAAY,CAAET,SAAUA,qCAIzF,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUpB,MAAOA,iDAI9BuC,QAAQC,IAAIV,IAAOnB,KAAKJ,MAAM+B,WAAY,CAAET,SAAUA,KACxDM,SAASC,eAAe,WAAWC,UAAYP,IAAOnB,KAAKJ,MAAM+B,WAAY,CAAET,SAAUA,WAZrEH,aCGTe,cAlBb,SAAAA,EAAYlC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IAChBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KAKRkB,SAAW,SAACiB,GAAD,OAAOlC,EAAKmC,SAAS,CAACL,WAAYI,EAAEE,OAAOC,SAHpDrC,EAAKO,MAAQ,CAACuB,WAAYvC,GAHVS,wEAShB,OACES,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,MAAM9C,MAAO,CAAC+C,MAAO,SAClC9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAQzB,cAAe,CAAC0B,MAAO,OAAQF,MAAO,MAAOG,OAAQ,OAAQzB,SAAUd,KAAKc,WACpFR,EAAAC,EAAAC,cAACgC,EAAD,CAAW5B,cAAe,CAAC0B,MAAO,QAASF,MAAO,MAAOG,OAAQ,OAAQZ,WAAY3B,KAAKI,MAAMuB,qBAbtFZ,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.685bbdde.chunk.js","sourcesContent":["export const INITIAL_EDITOR_DATA = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { INITIAL_EDITOR_DATA } from '../consts/initialEditorData';\r\n\r\nconst style = {\r\n    backgroundColor: '#EEEEEE',\r\n    color: '#000000',\r\n    fontWeight: 'bold',\r\n    fontSize: '15px',\r\n    border: '2px solid #333333'\r\n};\r\n\r\nclass Editor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {text: INITIAL_EDITOR_DATA};\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <textarea id='editor' defaultValue={this.state.text} style={{...style, ...this.props.positionStyle}} rows={50} onChange={this.props.onChange}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEditor.propTypes = {\r\n    positionStyle: PropTypes.object.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nimport { INITIAL_EDITOR_DATA } from '../consts/initialEditorData';\r\nimport PropTypes from 'prop-types';\r\nimport marked from 'marked';\r\n\r\n\r\n\r\n\r\nconst style = {\r\n    backgroundColor: '#CCAADD',\r\n    color: '#000000',\r\n    fontWeight: 'bold',\r\n    padding: '5px',\r\n    fontSize: '15px',\r\n    display: 'inline-block',\r\n    border: '2px solid #333333'\r\n};\r\n\r\nconst renderer = new marked.Renderer();\r\nmarked.setOptions({ breaks: true });\r\n\r\nclass Previewer extends Component {\r\n  \r\n  componentDidMount(){\r\n    document.getElementById('preview').innerHTML = marked(this.props.editorData, { renderer: renderer });\r\n  }\r\n    \r\n  render() {\r\n    return <div id='preview' style={style}></div>;\r\n  }\r\n\r\n  componentDidUpdate(){\r\n      console.log(marked(this.props.editorData, { renderer: renderer }));\r\n    document.getElementById('preview').innerHTML = marked(this.props.editorData, { renderer: renderer });\r\n  }\r\n}\r\n\r\nPreviewer.propTypes = {\r\n    editorData: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Previewer;\r\n","import React, { Component } from 'react';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\nimport { INITIAL_EDITOR_DATA } from './consts/initialEditorData';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {editorData: INITIAL_EDITOR_DATA};\n  }\n\n  onChange = (e) => this.setState({editorData: e.target.value});\n\n  render() {\n    return (\n      <div className=\"App\" style={{width: '100%'}}>\n        <Editor positionStyle={{float: 'left', width: '50%', height: '80%'}} onChange={this.onChange}/>\n        <Previewer positionStyle={{float: 'right', width: '50%', height: '80%'}} editorData={this.state.editorData}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}